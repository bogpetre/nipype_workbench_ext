# Note: this is another quick and dirty implementation. The dirt comes down to
# specifications of suboptions to -var, which can take -select x y -repeat type
# option. If you want to pass something like that implement a Function interface
# that takes your input file name as input and returns a string that includes
# that filename and the subsequent modifiers.
class VolumeMathInputSpec(CommandLineInputSpec):
    expression=Str(
        argstr='"%s"',
        position=0,
        desc="a mathematical expression to evaluate"
    )
    out_file=File(
        argstr='%s',
        position=1,
        genfile=True,
        desc="the output volume file. Autogenerated if not specified."
    )
    in_vars=traits.List(
        traits.Tuple(Str(),
                     traits.Either(File(exists=True),
                                   Str())),
        desc='repeatable - a volume file to use as a variable',
        argstr='-var "%s" %s...',
        mandatory=True,
        position=2
    )

class VolumeMathOutputSpec(TraitedSpec):
    out_file=File(
        exists=True,
        desc="the output volume file"
    )

class VolumeMath(wb.WBCommand):
    input_spec = VolumeMathInputSpec
    output_spec = VolumeMathOutputSpec

    _cmd = 'wb_command -volume-math'


    def _gen_filename(self, name):
        import os

        if name == 'out_file':
            if 'out_file' not in self.inputs.get() or not isdefined(self.inputs.out_file):
                return os.path.join(os.getcwd(), 'volume_math_results.nii.gz')
            return self.inputs.out_file

    def _list_outputs(self):
        outputs = self.output_spec().get()
        outputs['out_file'] = self._gen_filename('out_file')

        return outputs