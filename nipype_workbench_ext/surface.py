from nipype.interfaces.workbench import base as wb
from nipype.interfaces.base import (
    BaseInterface, 
    BaseInterfaceInputSpec, 
    traits, 
    File, 
    isdefined, 
    TraitedSpec, 
    CommandLineInputSpec, 
)
from traits.api import List

class SurfaceVertexAreasInputSpec(CommandLineInputSpec):
    surface=File(
        argstr='%s',
        position=0,
        exists=True,
        desc="The surface to measure"
    )
    out_file=File(
        argstr='%s',
        position=1,
        genfile=True,
        desc="The output metric. Autogenerated if not specified."
    )

class SurfaceVertexAreasOutputSpec(TraitedSpec):
    out_file=File(
        exists=True,
        desc="The output metric file"
    )

class SurfaceVertexAreas(wb.WBCommand):
    input_spec = SurfaceVertexAreasInputSpec
    output_spec = SurfaceVertexAreasOutputSpec

    _cmd = 'wb_command -surface-vertex-areas'

    def _gen_filename(self, name):
        import os

        if name == 'out_file':
            if 'out_file' not in self.inputs.get() or not isdefined(self.inputs.out_file):
                return os.path.join(os.getcwd(), 'surface_areas.func.gii')
            return self.inputs.out_file

    def _list_outputs(self):
        outputs = self.output_spec().get()
        if 'out_file' not in outputs or not isdefined(outputs['out_file']):
            outputs['out_file'] = self._gen_filename('out_file')

        return outputs

