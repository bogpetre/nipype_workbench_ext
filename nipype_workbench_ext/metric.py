from nipype.interfaces.workbench import base as wb
from nipype.interfaces.base import BaseInterface, BaseInterfaceInputSpec, traits, File, isdefined, TraitedSpec, CommandLineInputSpec
from traits.api import List

# a partial implmentation, but should be robust for what it does
class MetricDilateInputSpec(CommandLineInputSpec):
    metric=File(
        argstr='%s',
        position=0,
        exists=True,
        desc="The metric to dilate"
    )
    surface=File(
        argstr='%s',
        position=1,
        exists=True,
        desc="The surface to compute on"
    )
    distance=traits.Float(
        argstr='%s',
        position=2,
        desc="Distance in mm to dilate"
    )
    out_file=File(
        argstr='%s',
        position=4,
        genfile=True,
        desc="The output metric. Autogenerated if not specified."
    )
    nearest=traits.Bool(
        argstr='-nearest',
        position=-1,
        desc="Use the nearest good value instead of a weighted average"
    )

class MetricDilateOutputSpec(TraitedSpec):
    out_file=File(
        exists=True,
        desc="The output metric file"
    )

class MetricDilate(wb.WBCommand):
    input_spec = MetricDilateInputSpec
    output_spec = MetricDilateOutputSpec

    _cmd = 'wb_command -metric-dilate'

    def _gen_filename(self, name):
        import os

        if name == 'out_file':
            if 'out_file' not in self.inputs.get() or not isdefined(self.inputs.
                return os.path.join(os.getcwd(), 'dilated_metric.func.gii')
            return self.inputs.out_file

    def _list_outputs(self):
        outputs = self.output_spec().get()
        if 'out_file' not in outputs or not isdefined(outputs['out_file']):
            outputs['out_file'] = self._gen_filename('out_file')

        return outputs


